// import faust standard library
import("stdfaust.lib");
// Import lists: Frequencies, Amps, Bandwidth
import("SpectreLists.lib");


//---------------------------------------------------------------- FUNCTIONS ---
// Give a distance in meters - Delay time in samples in output
meterstoSamps(Meters) =  ((1000 / 343.1) * Meters) * (ma.SR / 1000);
ms2samp(t) = (t/1000) * ma.SR;
sec2samp(t) = t * ma.SR;

limit(maxl,minl,x) = x : max(minl, min(maxl)); 
XYZinspect(i, x, y, z) = hgroup("NetworkVoice_%i[2]", (Xvmeter((i+1), 0, 1000, x), Yvmeter((i+1), 0, 1000, y), Zvmeter((i+1), 0, 1000, z)));
Xvmeter(i, minx, maxx, x) = attach(x, x : peakenvelope(10) : vbargraph("X_%i[2] [style:numerical]", minx, maxx));
Yvmeter(i, minx, maxx, y) = attach(y, y : peakenvelope(10) : vbargraph("Y_%i[2] [style:numerical]", minx, maxx));
Zvmeter(i, minx, maxx, z) = attach(z, z : peakenvelope(10) : vbargraph("Z_%i[2] [style:numerical]", minx, maxx));
Vmeter(i, minx, maxx, x) = attach(x, x : peakenvelope(10) : vbargraph("%i[2] [style:numerical]", minx, maxx));
Hmeter(i, minx, maxx, x) = attach(x, x : peakenvelope(10) : hbargraph("%i[2] [style:numerical]", minx, maxx));

//------------------------------------------ CHAOTIC EQUATIONS CONSTRICTIONS ---
saturator(lim, x) = lim * ma.tanh(x / (max(lim, ma.EPSILON)));

dcblocker(zero, pole, x) = x : dcblockerout
    with{
        onezero =  _ <: _,mem : _,*(zero) : -;
        onepole = + ~ * (pole);
        dcblockerout = _ : onezero : onepole;
    };

timeVaryingDelay(delTime, fbGain, x) = loop ~ _ : mem
with {  
    loop(fb) = (fb * fbGain + x) : 
        de.sdelay( ba.sec2samp(DelSecondsMax), 
        1024, 
        ba.sec2samp(delTime)-1 );
    };

//------------------------------------------------------------------ FILTERS ---
// Zavalishin's SVF BP FILTER
// optimized BP from the TPT version of the SVF Filter by Vadim Zavalishin
// reference : (by Will Pirkle)
// http://www.willpirkle.com/Downloads/AN-4VirtualAnalogFilters.2.0.pdf
BPSVF(glin, bw, cf, x) = loop ~ si.bus(2) : (! , ! , _)
    with {
        g = tan(cf * ma.PI * (1.0/ma.SR));
        Q = cf / max(ma.EPSILON, bw);
        R = 1.0 / (Q + Q);
        G = 1.0 / (1.0 + 2.0 * R * g + g * g);
        loop(s1, s2) = u1 , u2 , bp * glin
            with {
                bp = (g * (x - s2) + s1) * G;
                bp2 = bp + bp;
                v2 = bp2 * g;
                u1 = bp2 - s1;
                u2 = v2 + s2;
            };
    };
// Zavalishin's Onepole TPT Filter
// reference : same of BPSVF
onePoleTPT(cf, x) = loop ~ _ : ! , si.bus(3) // Outs: lp , hp , ap
with {
    g = tan(cf * ma.PI * (1.0/ma.SR));
    G = g / (1.0 + g);
    loop(s) = u , lp , hp , ap
    with {
        v = (x - s) * G; u = v + lp; lp = v + s; hp = x - lp; ap = lp - hp;
    };
};
// Lowpass TPT
LPTPT(cf, x) = onePoleTPT(cf, x) : (_ , ! , !);
// Highpass TPT
HPTPT(cf, x) = onePoleTPT(cf, x) : (! , _ , !);

// Spectre BP Filter Banks
BandpassFiltersBank(bypassFilter, directFilter, filterPartials, filterOrder, globalFreq, globalAmps, globalBW, interpolation1, interpolation2, chngList1, chngList2, chngList3, chngList4, x) = x <: 
    par(i, filterPartials, 
        seq(r, filterOrder, 
            BPSVF(
                AmplitudesListinterpolate(  (i + 1), chngList1, chngList2, chngList3, chngList4, interpolation1, interpolation2) * globalAmps, 
                BandwidthsListinterpolate(  (i + 1), chngList1, chngList2, chngList3, chngList4, interpolation1, interpolation2) * globalBW, 
                FrequenciesListinterpolate( (i + 1), chngList1, chngList2, chngList3, chngList4, interpolation1, interpolation2) * globalFreq
            ) 
        )
    ):> (+ / filterPartials) * directFilter + (x * bypassFilter);

onepoletau(tau, x) = fb ~ _ 
with {  
    fb(y) = (1.0 - s) * x + s * y; 
    s = exp(-1.0/(tau * ma.SR));
    //   tau = desired smoothing time constant in seconds
    };
    
//---------------------------------------------------------------- ANALIZERS ---
peakHolder(holdTime, x) = loop ~ si.bus(2) : ! , _
with {
    loop(timerState, outState) = timer , output
    with {
        isNewPeak = abs(x) >= outState;
        isTimeOut = timerState >= (holdTime * ma.SR - 1);
        bypass = isNewPeak | isTimeOut;
        timer = ba.if(bypass, 0, timerState + 1);
        output = ba.if(bypass, abs(x), outState);
    };
};

// RMS with indipendent attack and release time:
// reference:
// Udo ZÃ¶lzer - Digital Audio Signal Processing Second Edition
// reference :
// https://fmipa.umri.ac.id/wp-content/uploads/2016/03/
// Udo-Zolzer-digital-audio-signal-processing.9780470997857.40435.pdf
RMS(att,rel,x) = loop ~ _ : sqrt
with {
    loop(y) = (1.0 - coeff) * x * x + coeff * y
    with {
        attCoeff = exp(-2.0 * ma.PI * (1.0/ma.SR) / att);
        relCoeff = exp(-2.0 * ma.PI * (1.0/ma.SR) / rel);
        coeff = ba.if(abs(x) > y, attCoeff, relCoeff);
    };
};

// Moving Average RMS
movingAverage(seconds, x) = x - (x @ N) : fi.pole(1.0) / N
with {
N = seconds * ma.SR;
};
RMSRectangular(seconds, x) = sqrt(max(0, movingAverage(seconds, x * x)));

// Peak Envelope (envelope follower)
// reference :
// https://www.dariosanfilippo.com/blog/2017/
// lookahead-limiting-in-pure-data/
// reference :
// https://www.cs.princeton.edu/courses/archive/spr05/cos579/DSP/DSP.html
peakenvelope(t,x) = abs(x) <: loop ~ _ * rt60(t)
with{
    loop(y,z) = ( (y,z) : max);
    rt60(t) = 0.001^((1/ma.SR)/t);
};

// peak-hold module with an exponential decay curve
peakHoldwDecay(holdSeconds, frequencyCut, decayT60, x) = x : 
    peakHolder(holdSeconds) : LPTPT(frequencyCut) : peakenvelope(decayT60);

//------------------------------------------------------- LOOKAHEAD LIMITERS ---
// reference :
// https://www.dariosanfilippo.com/blog/2017/
// lookahead-limiting-in-pure-data/
// reference :
// https://users.iem.at/zmoelnig/publications/limiter/
// Peak normalization
// reference :
// https://www.hackaudio.com/digital-signal-processing/amplitude/peak-normalization/

normalization(treshold, x) = treshold / ( x : peakHoldwDecay(.1, 500, 10) ) *
    x @ (( 2/1000 ) * ma.SR);

limitation(threshold, x) = ( x : peakHoldwDecay(.1, 500, 10) ) : 
    ( threshold / max(ma.EPSILON, _) : min(1.0) ) *
        ( x @ (ms2samp(1)));

//------------------------------------------------------------- NONLINEARITY ---


nonLinearity(exponent, refPeriod, y) = y : lowFreqNoise <: (nonlinearsig(exponent, ma.tanh(_ * normRMS)))
with{
    lowFreqNoise(x) = x : seq(i, 4, LPTPT(1.0 / refPeriod));
    noiseRMS(x) = x * x : LPTPT(1.0 / (10.0 * refPeriod)) : sqrt;
    normRMS(x) = 1.0 / max(ma.EPSILON, noiseRMS(x));
    nonlinearsig(exponent, x) = ma.signum(x) * pow(abs(x), exponent);
};