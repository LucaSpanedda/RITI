// import faust standard library
import("stdfaust.lib");


// INSTRUMENT SPECTRES --------------------------------------
// FFT analysis

Cello_C2pp_frequencies = (
9.0, 65.0, 131.0, 197.0, 262.0, 327.0, 393.0, 458.0, 524.0, 589.0, 655.0, 720.0, 786.0, 851.0, 917.0, 982.0, 1047.0, 1113.0, 1178.0, 1244.0, 1310.0, 1375.0, 1441.0, 1506.0, 1572.0, 1768.0, 1834.0, 1899.0, 2096.0, 2488.0, 2554.0, 2620.0
 ) ; 
 
Cello_C2pp_amplitudes = (
0.83527637, 0.0705986, 1.0, 0.48533458, 0.29825361, 0.24961559, 0.20074493, 0.1571452, 0.15710983, 0.20902308, 0.10262931, 0.07819993, 0.02810959, 0.03754288, 0.08372042, 0.00927965, 0.02127434, 0.02702054, 0.01707981, 0.01010378, 0.01193177, 0.00929211, 0.00888014, 0.00940227, 0.02091359, 0.00941733, 0.00511717, 0.00503596, 0.00514822, 0.00523106, 0.0057899, 0.00646889
 ) ; 
 
Cello_C2pp_bandwidths = (
1.00000000
 ) ; 


Cello_C2mf_frequencies = (
13.0, 66.0, 131.0, 197.0, 263.0, 329.0, 394.0, 460.0, 526.0, 591.0, 657.0, 723.0, 789.0, 855.0, 920.0, 986.0, 1052.0, 1117.0, 1183.0, 1315.0, 1446.0, 1512.0, 1578.0, 1643.0, 1709.0, 1775.0, 2103.0, 2169.0, 2235.0, 2301.0, 2498.0, 2629.0
 ) ; 
 
Cello_C2mf_amplitudes = (
0.24278292, 0.08931336, 0.80077538, 1.0, 0.32822631, 0.32463332, 0.72421724, 0.18829557, 0.31799277, 0.1451487, 0.14254178, 0.08457747, 0.03518836, 0.08126652, 0.02720469, 0.03165227, 0.03176888, 0.04353269, 0.01438186, 0.03467337, 0.01292742, 0.02601772, 0.02087285, 0.0105199, 0.02037633, 0.01517452, 0.01007304, 0.0167416, 0.01010814, 0.01919797, 0.01586934, 0.01023397
 ) ; 
 
Cello_C2mf_bandwidths = (
1.00000000
 ) ; 


Cello_C2ff_frequencies = (
2.0, 133.0, 200.0, 266.0, 333.0, 398.0, 468.0, 534.0, 601.0, 668.0, 734.0, 801.0, 868.0, 927.0, 1001.0, 1069.0, 1135.0, 1193.0, 1269.0, 1336.0, 1402.0, 1469.0, 1536.0, 1603.0, 2071.0, 2137.0, 2204.0, 2271.0, 2338.0, 2538.0, 2605.0, 2672.0
 ) ; 
 
Cello_C2ff_amplitudes = (
0.08101537, 0.58682862, 1.0, 0.13340256, 0.20067866, 0.0868557, 0.19101222, 0.08916302, 0.12167227, 0.1080471, 0.03578437, 0.05946919, 0.03722018, 0.02155813, 0.03868905, 0.04418049, 0.03193932, 0.02166562, 0.01959927, 0.01662785, 0.03706421, 0.01077118, 0.03314357, 0.02021888, 0.02489476, 0.00944106, 0.00868696, 0.01046872, 0.00924943, 0.01722623, 0.02355646, 0.0113672
 ) ; 
 
Cello_C2ff_bandwidths = (
1.00000000
 ) ; 


Cello_bow_frequencies = (
95.0, 163.0, 302.0, 391.0, 448.0, 495.0, 584.0, 699.0, 827.0, 893.0, 956.0, 1126.0, 1234.0, 1313.0, 1370.0, 1436.0, 1490.0, 1581.0, 1655.0, 1717.0, 1835.0, 1919.0, 1982.0, 2103.0, 2172.0, 2242.0, 2379.0, 2531.0, 2741.0, 2840.0, 2925.0, 2974.0
 ) ; 
 
Cello_bow_amplitudes = (
1.0, 0.73984275, 0.32091189, 0.32737743, 0.19003701, 0.0589426, 0.14491521, 0.10133096, 0.08091331, 0.0789707, 0.03761855, 0.01192979, 0.02057568, 0.01718642, 0.02616385, 0.0350832, 0.04107218, 0.03504625, 0.03604213, 0.06865388, 0.0916736, 0.03800136, 0.04618302, 0.01662908, 0.02229591, 0.01153415, 0.01166253, 0.02736693, 0.04575558, 0.01781169, 0.02237751, 0.01427391
 ) ; 
 
Cello_bow_bandwidths = (
1.00000000
 ) ; 


Cello_special_frequencies = (
103.0, 189.0, 283.0, 331.0, 458.0, 703.0, 799.0, 859.0, 962.0, 1054.0, 1162.0, 1224.0, 1285.0, 1439.0, 1517.0, 1603.0, 1722.0, 1820.0, 1882.0, 2020.0, 2105.0, 2189.0, 2239.0, 2297.0, 2400.0, 2502.0, 2971.0, 3049.0, 4063.0, 4128.0, 4175.0, 6164.0
 ) ; 
 
Cello_special_amplitudes = (
0.80133309, 1.0, 0.41346861, 0.40591781, 0.55142373, 0.25720178, 0.62726933, 0.34075228, 0.30889547, 0.22488487, 0.10519148, 0.08293513, 0.1560168, 0.26917098, 0.27796313, 0.1323176, 0.09801507, 0.1530335, 0.16927497, 0.32853968, 0.11426218, 0.11802409, 0.10771885, 0.13265515, 0.17061769, 0.14751461, 0.08544682, 0.11896314, 0.09086035, 0.09473715, 0.07186479, 0.09449387
 ) ; 
 
Cello_special_bandwidths = (
1.00000000
 ) ; 


// INSTRUMENT SPECTRES --------------------------------------
// index of the lists

FrequenciesListCH1(index) = ba.take(index, Cello_C2pp_frequencies) ;
AmplitudesListCH1(index) = ba.take(index, Cello_C2pp_amplitudes)  ;
BandwidthsListCH1(index) = ba.take(1,     Cello_C2pp_bandwidths)  ;

FrequenciesListCH2(index) = ba.take(index, Cello_C2mf_frequencies) ;
AmplitudesListCH2(index) = ba.take(index, Cello_C2mf_amplitudes)  ;
BandwidthsListCH2(index) = ba.take(1,     Cello_C2mf_bandwidths)  ;

FrequenciesListCH3(index) = ba.take(index, Cello_C2ff_frequencies) ;
AmplitudesListCH3(index) = ba.take(index, Cello_C2ff_amplitudes)  ;
BandwidthsListCH3(index) = ba.take(1,     Cello_C2ff_bandwidths)  ;

FrequenciesListCH4(index) = ba.take(index, Cello_bow_frequencies) ;
AmplitudesListCH4(index) = ba.take(index, Cello_bow_amplitudes)  ;
BandwidthsListCH4(index) = ba.take(1,     Cello_bow_bandwidths)  ;

// lists interpolations
FrequenciesListSum(index, Sel) =   
                            (FrequenciesListCH1(index) * (Sel == 1)) + 
                            (FrequenciesListCH2(index) * (Sel == 2)) +
                            (FrequenciesListCH3(index) * (Sel == 3)) +
                            (FrequenciesListCH4(index) * (Sel == 4)) ;
AmplitudesListSum(index, Sel) =    
                            (AmplitudesListCH1(index)  * (Sel == 1)) + 
                            (AmplitudesListCH2(index)  * (Sel == 2)) + 
                            (AmplitudesListCH3(index)  * (Sel == 3)) + 
                            (AmplitudesListCH4(index)  * (Sel == 4)) ;
BandwidthsListSum(index, Sel) =    
                            (BandwidthsListCH1(index)  * (Sel == 1)) + 
                            (BandwidthsListCH2(index)  * (Sel == 2)) + 
                            (BandwidthsListCH3(index)  * (Sel == 3)) + 
                            (BandwidthsListCH4(index)  * (Sel == 4)) ;


// ChngList = nentry("Change List", 1, 1, 4, 1);

// process = par(i, 10, FrequenciesListG((i + 1), ChngList), AmplitudesListG((i + 1), ChngList), BandwidthsListG((i + 1), ChngList));

// linear interpolation
linInterpolate(x0, x1, delta) = x0 + delta * (x1-x0);
siglinInterpol(order, x) = x : seq(r, order, interpolate)
with{
    interpolate(y) = y + .5 * (y' - y);
};

// bilinear interpolation
bilinInterpolate(x0, x1, x0b, x1b, dt1, dt2) = 
    linInterpolate(
        linInterpolate(x0, x1, dt1), 
        linInterpolate(x0b, x1b, dt1),
        dt2)
    with{
        linInterpolate(x0, x1, delta) = x0 + delta * (x1-x0);
    };

// lists interpolations
FrequenciesListinterpolate(index, Sel1, Sel2, Sel3, Sel4, dt1, dt2) = 
    bilinInterpolate(
        FrequenciesListSum(index, Sel1), 
        FrequenciesListSum(index, Sel2), 
        FrequenciesListSum(index, Sel3), 
        FrequenciesListSum(index, Sel4), 
        dt1, dt2);
AmplitudesListinterpolate(index, Sel1, Sel2, Sel3, Sel4, dt1, dt2) = 
    bilinInterpolate(
        AmplitudesListSum(index, Sel1), 
        AmplitudesListSum(index, Sel2), 
        AmplitudesListSum(index, Sel3), 
        AmplitudesListSum(index, Sel4), 
        dt1, dt2);
BandwidthsListinterpolate(index, Sel1, Sel2, Sel3, Sel4, dt1, dt2) = 
    bilinInterpolate(
        BandwidthsListSum(index, Sel1), 
        BandwidthsListSum(index, Sel2), 
        BandwidthsListSum(index, Sel3), 
        BandwidthsListSum(index, Sel4), 
        dt1, dt2);