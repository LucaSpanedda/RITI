declare name "Room Is The Instrument";
declare author "Luca Spanedda";
declare version "1.4";
declare description "2023";
declare copyright "Copyright (C) 2023 Luca Spanedda <lucaspanedda1995@gmail dot com>";
declare license "MIT license";

//---------------------------`ROOM IS THE INSTRUMENT`--------------------------
//-------------------------`Import Files and Libraries`------------------------
// Import the standard Faust Libraries
import("stdfaust.lib");

// -------------------------------------------------- CELLO C
C_SUL_TASTO_frequencies = (
65.0, 131.0, 196.0, 261.0, 326.0, 392.0, 457.0, 522.0, 588.0, 653.0, 718.0, 784.0, 849.0, 914.0, 979.0, 1045.0, 1110.0, 1175.0, 1241.0, 1306.0, 1371.0, 1502.0, 1567.0, 1632.0, 1698.0, 1763.0, 1828.0, 1894.0, 1959.0, 2024.0, 2089.0, 2351.0
 ) ; 
 
C_SUL_TASTO_amplitudes = (
0.04196492, 0.27707616, 1.0, 0.08153769, 0.05522969, 0.01922137, 0.03436227, 0.03067041, 0.01797695, 0.03381146, 0.0550058, 0.02913938, 0.05834666, 0.03480883, 0.01985851, 0.02222397, 0.02735344, 0.00482074, 0.00496045, 0.00848029, 0.01668042, 0.0121161, 0.04640077, 0.02313585, 0.00729633, 0.00722812, 0.01041008, 0.00722225, 0.00592071, 0.01158114, 0.00443968, 0.00282064
 ) ; 
 
C_SUL_TASTO_bandwidths = (
1.00000000
 ) ; 

C_SUL_PONTE_frequencies = (
65.0, 130.0, 195.0, 261.0, 326.0, 391.0, 456.0, 521.0, 586.0, 651.0, 717.0, 782.0, 847.0, 912.0, 977.0, 1042.0, 1107.0, 1170.0, 1238.0, 1300.0, 1367.0, 1434.0, 1499.0, 1564.0, 1629.0, 1694.0, 1760.0, 1825.0, 1890.0, 1954.0, 2021.0, 2085.0
 ) ; 
 
C_SUL_PONTE_amplitudes = (
0.02789289, 0.40853124, 1.0, 0.11091643, 0.0647856, 0.03734871, 0.02493605, 0.02314501, 0.02637558, 0.03331669, 0.08188277, 0.04299356, 0.06739248, 0.03783816, 0.0274411, 0.04182531, 0.0386263, 0.01525164, 0.00687666, 0.01221123, 0.01760329, 0.00686469, 0.01441863, 0.03875951, 0.04289226, 0.02230978, 0.03048675, 0.01094138, 0.00915901, 0.00736049, 0.00956486, 0.00532164
 ) ; 
 
C_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

C_MOLTO_SUL_PONTE_frequencies = (
65.0, 130.0, 195.0, 261.0, 324.0, 391.0, 456.0, 522.0, 568.0, 652.0, 715.0, 782.0, 849.0, 913.0, 978.0, 1043.0, 1108.0, 1173.0, 1304.0, 1369.0, 1434.0, 1501.0, 1565.0, 1632.0, 1695.0, 1762.0, 1825.0, 1877.0, 1955.0, 2021.0, 2086.0, 2136.0, 2216.0
 ) ; 
 
C_MOLTO_SUL_PONTE_amplitudes = (
0.01789289, 1.0, 0.1119946, 0.37794605, 0.01853937, 0.09701652, 0.01508738, 0.08147287, 0.01527196, 0.13719799, 0.04488286, 0.10778057, 0.03938983, 0.1086438, 0.02285654, 0.18177087, 0.04472455, 0.03171519, 0.04385811, 0.02564654, 0.04654733, 0.02098973, 0.14135472, 0.04765163, 0.05790227, 0.04065074, 0.03339859, 0.02326387, 0.0358107, 0.02291944, 0.03277207, 0.01508144, 0.01629959
 ) ; 
 
C_MOLTO_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

C_ARMONICI_frequencies = (
62.0, 128.0, 192.0, 253.0, 327.0, 383.0, 465.0, 575.0, 653.0, 731.0, 808.0, 879.0, 980.0, 1051.0, 1106.0, 1253.0, 1307.0, 1406.0, 1472.0, 1568.0, 1633.0, 1740.0, 1860.0, 1960.0, 2027.0, 2096.0, 2287.0, 2613.0, 2940.0, 3267.0, 3593.0, 3922.0
 ) ; 
 
C_ARMONICI_amplitudes = (
0.02379753, 0.01588414, 0.0630001, 0.01690107, 1.0, 0.01977984, 0.0071704, 0.02076793, 0.76311832, 0.01959406, 0.00693621, 0.01205804, 0.43136463, 0.00940068, 0.01014689, 0.00820981, 0.18989729, 0.01012334, 0.00511506, 0.02526374, 0.55446251, 0.00962092, 0.00790504, 0.06238205, 0.0096802, 0.00466146, 0.04442261, 0.01876171, 0.01171935, 0.00492013, 0.00646246, 0.00434414
 ) ; 
 
C_ARMONICI_bandwidths = (
1.00000000
 ) ; 


// -------------------------------------------------- CELLO G
G_SUL_TASTO_frequencies = (
98.0, 195.0, 293.0, 391.0, 489.0, 537.0, 587.0, 685.0, 783.0, 880.0, 979.0, 1076.0, 1174.0, 1272.0, 1371.0, 1468.0, 1566.0, 1664.0, 1762.0, 1860.0, 1958.0, 2056.0, 2153.0, 2252.0, 2349.0, 2643.0, 2741.0, 2839.0, 2937.0, 3230.0, 3328.0, 4013.0
 ) ; 
 
G_SUL_TASTO_amplitudes = (
0.75217775, 1.0, 0.09843679, 0.02426847, 0.06051622, 0.00787687, 0.04838698, 0.05785498, 0.0640251, 0.05363475, 0.02121633, 0.03638926, 0.01772408, 0.02102163, 0.00274825, 0.00886369, 0.02193515, 0.01863539, 0.02143791, 0.01670722, 0.01592137, 0.00709897, 0.01305707, 0.00348521, 0.00190274, 0.00161424, 0.00333966, 0.00320751, 0.00126865, 0.00132724, 0.00152525, 0.00097757
 ) ; 
 
G_SUL_TASTO_bandwidths = (
1.00000000
 ) ; 

G_SUL_PONTE_frequencies = (
98.0, 196.0, 294.0, 371.0, 491.0, 537.0, 588.0, 685.0, 785.0, 880.0, 981.0, 1079.0, 1176.0, 1275.0, 1368.0, 1416.0, 1470.0, 1569.0, 1662.0, 1765.0, 1863.0, 1959.0, 2025.0, 2069.0, 2135.0, 2249.0, 2353.0, 2452.0, 2549.0, 2640.0, 2746.0, 2844.0
 ) ; 
 
G_SUL_PONTE_amplitudes = (
0.93944667, 1.0, 0.1397667, 0.04960039, 0.07790099, 0.02185911, 0.0619144, 0.09455926, 0.11242908, 0.10650139, 0.03686391, 0.08468119, 0.04027777, 0.04988492, 0.00878743, 0.00832572, 0.02584302, 0.03396986, 0.03909495, 0.02370068, 0.01383755, 0.00943089, 0.00821213, 0.01066961, 0.00879838, 0.00467986, 0.00689834, 0.00597029, 0.00579739, 0.00418297, 0.00827453, 0.00705785
 ) ; 
 
G_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

G_MOLTO_SUL_PONTE_frequencies = (
97.0, 190.0, 294.0, 370.0, 490.0, 545.0, 588.0, 686.0, 785.0, 882.0, 982.0, 1079.0, 1178.0, 1275.0, 1373.0, 1471.0, 1568.0, 1671.0, 1766.0, 1863.0, 1961.0, 2059.0, 2135.0, 2255.0, 2353.0, 2549.0, 2651.0, 2747.0, 2843.0, 3235.0, 3334.0, 6664.0
 ) ; 
 
G_MOLTO_SUL_PONTE_amplitudes = (
0.41314195, 0.33304011, 0.09897786, 0.09786711, 0.30920571, 0.03242771, 0.24827038, 1.0, 0.24879086, 0.19577422, 0.11964251, 0.29149713, 0.07896685, 0.2476789, 0.0553103, 0.06057399, 0.13858297, 0.01611911, 0.04639251, 0.07277674, 0.18327809, 0.01780529, 0.00905065, 0.02117437, 0.0095725, 0.04107566, 0.01187122, 0.02229674, 0.0160313, 0.01228535, 0.0104387, 0.0054387
 ) ; 
 
G_MOLTO_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

G_ARMONICI_frequencies = (
50.0, 102.0, 191.0, 391.0, 495.0, 538.0, 656.0, 783.0, 889.0, 961.0, 1080.0, 1175.0, 1290.0, 1408.0, 1510.0, 1569.0, 1676.0, 1760.0, 1853.0, 1962.0, 2068.0, 2126.0, 2227.0, 2295.0, 2354.0, 2493.0, 2602.0, 2745.0, 2855.0, 3137.0, 3922.0, 7999.0
 ) ; 
 
G_ARMONICI_amplitudes = (
0.29967682, 0.52334332, 0.559064, 1.0, 0.3884109, 0.15656609, 0.14363522, 0.84879013, 0.17350533, 0.1347252, 0.08320332, 0.68126899, 0.09573852, 0.04995808, 0.0790263, 0.23214791, 0.07300799, 0.02958386, 0.03261651, 0.27091008, 0.05083893, 0.06691769, 0.03115996, 0.01623343, 0.04412083, 0.0099207, 0.0097774, 0.05262677, 0.01634304, 0.0090678, 0.00720456, 0.00639569
 ) ; 
 
G_ARMONICI_bandwidths = (
1.00000000
 ) ; 


// -------------------------------------------------- CELLO D
D_SUL_TASTO_frequencies = (
53.0, 147.0, 203.0, 294.0, 367.0, 441.0, 534.0, 588.0, 735.0, 785.0, 882.0, 961.0, 1028.0, 1078.0, 1175.0, 1269.0, 1323.0, 1470.0, 1617.0, 1764.0, 1855.0, 1910.0, 2054.0, 2204.0, 2273.0, 2351.0, 2498.0, 2645.0, 2792.0, 3233.0, 3380.0, 3527.0
 ) ; 
 
D_SUL_TASTO_amplitudes = (
0.07116083, 1.0, 0.0405712, 0.49828005, 0.02470587, 0.25042786, 0.0250452, 0.09954785, 0.54357606, 0.01573797, 0.2722688, 0.01228042, 0.14442907, 0.01626654, 0.28175268, 0.02115358, 0.07170723, 0.06191843, 0.07354127, 0.05126037, 0.01093969, 0.0343155, 0.06985491, 0.09585942, 0.00656447, 0.01233555, 0.01134687, 0.01055565, 0.03127152, 0.01587526, 0.00962998, 0.0068168
 ) ; 
 
D_SUL_TASTO_bandwidths = (
1.00000000
 ) ; 

D_SUL_PONTE_frequencies = (
47.0, 147.0, 295.0, 376.0, 442.0, 589.0, 737.0, 884.0, 1032.0, 1179.0, 1326.0, 1474.0, 1621.0, 1768.0, 1916.0, 2063.0, 2211.0, 2358.0, 2506.0, 2653.0, 2800.0, 2947.0, 3095.0, 3242.0, 3390.0, 3537.0, 3832.0, 4126.0, 4716.0, 8695.0, 8842.0, 8990.0
 ) ; 
 
D_SUL_PONTE_amplitudes = (
0.0115988, 0.79435758, 1.0, 0.00761094, 0.31147711, 0.27645337, 0.70041476, 0.37004342, 0.22757333, 0.26280688, 0.0140129, 0.26240869, 0.22235847, 0.09641164, 0.06606946, 0.17807532, 0.08549717, 0.0395032, 0.00685839, 0.03022879, 0.03570775, 0.00762574, 0.00934675, 0.00905542, 0.01589669, 0.00390371, 0.01159427, 0.00429153, 0.00508935, 0.00393937, 0.00423055, 0.00489773
 ) ; 
 
D_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

D_MOLTO_SUL_PONTE_frequencies = (
50.0, 120.0, 193.0, 308.0, 367.0, 453.0, 537.0, 589.0, 736.0, 828.0, 880.0, 964.0, 1031.0, 1101.0, 1179.0, 1275.0, 1330.0, 1408.0, 1480.0, 1630.0, 1727.0, 1782.0, 1933.0, 2085.0, 2233.0, 2402.0, 2567.0, 2658.0, 2725.0, 3385.0, 3564.0, 3716.0
 ) ; 
 
D_MOLTO_SUL_PONTE_amplitudes = (
0.12016983, 0.20445953, 0.36800338, 0.15692499, 0.30131985, 0.14972588, 0.18533416, 0.33731543, 0.72214925, 0.05300139, 0.42079979, 0.12813918, 0.30809514, 0.09815371, 0.57583112, 0.04054637, 0.23351324, 0.0829156, 0.97109771, 1.0, 0.05439881, 0.61768199, 0.46537996, 0.65365303, 0.2683161, 0.195627, 0.09141798, 0.06337808, 0.21253215, 0.04839137, 0.07402531, 0.14828266
 ) ; 
 
D_MOLTO_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

D_ARMONICI_frequencies = (
50.0, 120.0, 189.0, 301.0, 363.0, 588.0, 711.0, 775.0, 876.0, 937.0, 1009.0, 1096.0, 1177.0, 1308.0, 1414.0, 1506.0, 1572.0, 1684.0, 1768.0, 1870.0, 1929.0, 2068.0, 2162.0, 2277.0, 2349.0, 2458.0, 2580.0, 2780.0, 2940.0, 3199.0, 3330.0, 4116.0
 ) ; 
 
D_ARMONICI_amplitudes = (
0.08798947, 0.06955063, 0.38684497, 0.12097697, 0.0666715, 1.0, 0.05412838, 0.07071769, 0.0406236, 0.0585358, 0.05028837, 0.17782794, 0.58121312, 0.01898218, 0.04289775, 0.0657497, 0.07530507, 0.04046669, 0.07199584, 0.01676172, 0.02490302, 0.02432096, 0.02480079, 0.02332054, 0.05601889, 0.01049962, 0.00898637, 0.03078073, 0.02698139, 0.00997946, 0.01003087, 0.01249989
 ) ; 
 
D_ARMONICI_bandwidths = (
1.00000000
 ) ; 


// -------------------------------------------------- CELLO A
A_SUL_TASTO_frequencies = (
50.0, 130.0, 220.0, 309.0, 368.0, 439.0, 538.0, 659.0, 879.0, 1099.0, 1319.0, 1539.0, 1759.0, 1978.0, 2198.0, 2418.0, 2638.0, 2858.0, 3078.0, 3298.0, 3517.0, 3737.0, 3957.0, 4177.0, 4617.0, 5056.0, 5496.0, 5717.0, 7035.0, 7255.0, 8574.0, 9672.0
 ) ; 
 
A_SUL_TASTO_amplitudes = (
0.01835863, 0.01216278, 1.0, 0.00749257, 0.01035828, 0.6674602, 0.00707754, 0.62411215, 0.4053105, 0.64427134, 0.27821024, 0.08982961, 0.07338235, 0.03442368, 0.22375855, 0.02409027, 0.04759307, 0.03888326, 0.01222045, 0.03283333, 0.02061391, 0.02601317, 0.01631748, 0.01776269, 0.00854136, 0.01528356, 0.01369543, 0.00841917, 0.02237106, 0.00969712, 0.00986048, 0.01255551
 ) ; 
 
A_SUL_TASTO_bandwidths = (
1.00000000
 ) ; 

A_SUL_PONTE_frequencies = (
50.0, 130.0, 220.0, 309.0, 370.0, 440.0, 571.0, 660.0, 880.0, 962.0, 1099.0, 1319.0, 1472.0, 1539.0, 1610.0, 1760.0, 1979.0, 2199.0, 2289.0, 2419.0, 2639.0, 2859.0, 3079.0, 3298.0, 3518.0, 3738.0, 3958.0, 4178.0, 4398.0, 4618.0, 5937.0, 6157.0, 7037.0, 7696.0
 ) ; 
 
A_SUL_PONTE_amplitudes = (
0.01835863, 0.01595528, 1.0, 0.00749257, 0.01473354, 0.87218321, 0.00859515, 0.58950176, 0.38136923, 0.0123053, 0.58324971, 0.37238753, 0.00848152, 0.18288659, 0.01062739, 0.0110874, 0.05359905, 0.31640501, 0.01081347, 0.02695659, 0.06988175, 0.0487292, 0.02884024, 0.05809226, 0.03553339, 0.04916007, 0.02046966, 0.02435397, 0.00808617, 0.0085891, 0.00905874, 0.01194446, 0.02025366, 0.00864089
 ) ; 
 
A_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

A_MOLTO_SUL_PONTE_frequencies = (
50.0, 97.0, 191.0, 309.0, 365.0, 440.0, 541.0, 658.0, 764.0, 878.0, 960.0, 1010.0, 1098.0, 1236.0, 1316.0, 1431.0, 1471.0, 1534.0, 1759.0, 1977.0, 2199.0, 2417.0, 2639.0, 2857.0, 3079.0, 3297.0, 3517.0, 3736.0, 4179.0, 5718.0, 7260.0, 7699.0, 8358.0
 ) ; 
 
A_MOLTO_SUL_PONTE_amplitudes = (
0.09118761, 0.12160486, 0.37748318, 0.00749257, 0.13470854, 0.22464179, 0.07338048, 0.53291657, 0.03839275, 0.35695539, 0.05320811, 0.05098461, 1.0, 0.0278835, 0.1524945, 0.02130052, 0.03015198, 0.0465949, 0.08738714, 0.15106893, 0.56470169, 0.14170238, 0.1250138, 0.08395657, 0.0551964, 0.06252154, 0.11631001, 0.03080954, 0.02444248, 0.02256155, 0.02680212, 0.04103985, 0.02178977
 ) ; 
 
A_MOLTO_SUL_PONTE_bandwidths = (
1.00000000
 ) ; 

A_ARMONICI_frequencies = (
62.0, 130.0, 191.0, 261.0, 311.0, 370.0, 457.0, 537.0, 705.0, 878.0, 972.0, 1117.0, 1169.0, 1247.0, 1472.0, 1697.0, 1755.0, 1983.0, 2050.0, 2287.0, 2381.0, 2546.0, 2632.0, 2813.0, 3185.0, 3247.0, 3517.0, 4395.0, 6150.0, 7892.0, 8787.0, 9665.0
 ) ; 
 
A_ARMONICI_amplitudes = (
0.0518624, 0.01107689, 0.04390014, 0.01010253, 0.0061377, 0.02792264, 0.00731042, 0.00808291, 0.0146077, 1.0, 0.0069374, 0.00814141, 0.00537457, 0.00460423, 0.0111435, 0.02712111, 0.178429, 0.00467003, 0.0076334, 0.00658081, 0.00390276, 0.00570306, 0.04632687, 0.00751121, 0.00556629, 0.00511733, 0.01623212, 0.01861312, 0.01242462, 0.0044044, 0.00456787, 0.00629657
 ) ; 
 
A_ARMONICI_bandwidths = (
1.00000000
 ) ; 




// Prime Numbers List
primes =
(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,
167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,
563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,
653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,
761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,
1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,
1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259,
1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361,
1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453,
1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549,
1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621,
1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733,
1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847,
1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949,
1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039,
2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137,
2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251,
2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347,
2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437,
2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551,
2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671,
2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843,
2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957,
2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067,
3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191,
3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307,
3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391,
3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517,
3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607,
3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701,
3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821,
3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919,
3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021,
4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133,
4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243,
4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357,
4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481,
4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591,
4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691,
4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801,
4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937,
4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021,
5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147,
5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273,
5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399,
5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483,
5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591,
5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701,
5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821,
5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903,
5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053,
6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163,
6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271,
6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361,
6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491,
6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619,
6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733,
6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841,
6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961,
6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057,
7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,
7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321,
7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477,
7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559,
7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669,
7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759,
7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901,
7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039,
8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161,
8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269,
8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387,
8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527,
8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641,
8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737,
8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839,
8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969,
8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091,
9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203,
9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323,
9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431,
9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533,
9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661,
9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781,
9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883,
9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037,
10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133,
10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223,
10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313,
10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429,
10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529,
10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639,
10651, 10657, 10663, 10667);

// Primes Thousands Numbers List
primesThousands = 
(10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 
10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 
10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 
10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 
10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 
10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 
10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 
10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 
10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 
10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 
11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 
11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 
11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 
11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 
11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 
11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 
11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 
11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 
11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 
12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 
12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 
12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 
12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 
12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 
12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 
12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 
12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 
12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 
12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 
13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 
13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 
13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 
13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 
13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 
13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 
13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 
13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 
13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 
13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 
14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 
14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323, 
14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 
14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 
14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 
14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 
14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 
14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 
14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 
15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 
15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 
15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 
15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 
15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 
15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 
15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 
15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 
15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 
15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 
16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 
16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 
16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381, 
16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 
16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 
16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 
16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 
16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 
16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041, 
17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 
17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 
17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 
17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 
17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 
17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 
17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 
17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921, 
17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013, 
18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 
18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217, 
18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307, 
18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 
18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 
18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 
18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773, 
18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 
18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 
19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181, 
19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273, 
19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 
19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 
19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 
19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699, 
19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 
19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 
19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011);

// Import FFT Analysis
Flist(0) = C_SUL_TASTO_frequencies;
Alist(0) = C_SUL_TASTO_amplitudes;
Flist(1) = G_SUL_TASTO_frequencies;
Alist(1) = G_SUL_TASTO_amplitudes;
Flist(2) = D_SUL_TASTO_frequencies;
Alist(2) = D_SUL_TASTO_amplitudes;
Flist(3) = A_SUL_TASTO_frequencies;
Alist(3) = A_SUL_TASTO_amplitudes;

//---------------------------`ROOM IS THE INSTRUMENT`--------------------------
//--------------------------`Main Network Signal Flow`-------------------------
//
//-----------------------------------------------------------------------------
// RITI MAIN NETWORK
Duffing_Semiautonomous_Network(N) = 
    (vgroup("Controls", 
        hgroup("Oscillators", par(i, N, CntrlSignals(i, 7, 10, 5, 10)))
    ) : 
        hgroup("Inspectors", par(i, N, duffing_autOSC(i)))) ~    
    (vgroup("Controls", Matrixes(N, 0) : Del(N))) : 
        vgroup("Controls", hgroup("Oscillators", 
            hgroup("Output", Stabilizer(N)))
        );
process = tgroup("RITI", Duffing_Semiautonomous_Network(4));




//---------------------------`ROOM IS THE INSTRUMENT`--------------------------
//-------------------------------`Objects Library`-----------------------------
//
//-----------------------------------------------------------------------------
// LIBRARY

/************************************************************************
************************************************************************
- BASIC -
************************************************************************
************************************************************************/

// constants values
PI = ma.PI;
TWOPI = 2.0 * PI;
SR = ma.SR;
EPS = ma.EPSILON;
NY = SR / 2.0;
T = 1.0 / SR;
PIT = PI * T;
TWOPIT = TWOPI * T;
MS2T(t) = (t / 1000) * ma.SR;


// Info
info(i, lower, upper) = 
    _ <: _, vbargraph(" %i [style:numerical]", lower, upper) : attach;
infoScale(i, lower, upper) = 
    _ <: _, (_ * 1000 : vbargraph(" %i [style:numerical]", 
        lower * 1000, upper * 1000)) : attach;

// dB Meters
dBMeters(N) = hgroup("Output Channels", par(i, N, vmeter(i)))
with {
	vmeter(i, x) = attach(x, envelop(x) : 
        vbargraph("chan %i[2][unit:dB]", -70, +5));
	hmeter(i, x) = attach(x, envelop(x) : 
        hbargraph("chan %i[2][unit:dB]", -70, +5));
	envelop = abs : max ~ -(1.0/ma.SR) : 
        max(ba.db2linear(-70)) : ba.linear2db;
};

// Output Routing
outputchannels = vgroup("Outputs", si.bus(8) <: 
                    (stereo, quadri, octoph) :> dBMeters(8))
with{
    selCH = vslider("Output Channels [style:radio{'Stereophonic':0;'Quadraphonic':1;'Octophonic':2}]", 2, 0, 2, 1);
    stereo = par(i, 8, _ * (selCH == 0)) :> par(i, 2, _ / 4) <: si.bus(8);
    quadri = par(i, 8, _ * (selCH == 1)) :> par(i, 4, _ / 2) <: si.bus(8);
    octoph = par(i, 8, _ * (selCH == 2));
};
//process = outputchannels;

// binary selector 0 - 1
selector(sel, x, y) = ( x * (1 - sel) + y * (sel) );

// index of the primes numbers
primeNumbers(index) = ba.take(index , list)
with{
    list = primes;
};

// Parallel fixed delay lines
Del(N) = par(i, N, _ @ 2000);


/************************************************************************
************************************************************************
- MAPPING -
************************************************************************
************************************************************************/

// bipolar -1/+1 to unipolar 0/1 
biToUni(x) = (x + 1) / 2;
// accept 0/1 
map(minL, maxL, x) = x * (maxL - minL) + minL;


/************************************************************************
************************************************************************
- INTERPOLATIONS -
************************************************************************
************************************************************************/

// select a point between multiple points
selectN0(N,i) = selectN0X(N, i, selector0)
with {
    // binary selector 0 - 1
    selector(sel, x, y) = ( x * (1 - sel) + y * (sel) );
    selector0(i, j, x, y) = selector((i >= j), x, y);
    selectN0X(N,i,sel) = S(N,0)
        with {
            S(1,offset) = _;
             S(n,offset) = S(left, offset), S(right, offset+left) : 
                sel(i, offset+left)
                with {
                    right = int(n/2);
                    left  = n-right;
                };
        };
};

// interpolate multiple points
lerpMulti(points, ph) = (1.0 - D) * selN0 + D * selN1
    with {
        intPart = int(ph * points);
        D = ph * points - int(ph * points);
        selN0 = selectN0(points, intPart + 0, si.bus(points));
        selN1 = selectN0(points, intPart + 1, si.bus(points));
    };


/************************************************************************
************************************************************************
- LIMITERS AND SATURATORS -
************************************************************************
************************************************************************/

// Hyperbolic Tangent Saturator
saturator(lim, x) = lim * ma.tanh(x / (max(lim, ma.EPSILON)));
// Arc Tangent Saturator
atanlimit = (atan * (1 / (ma.PI * .5)));
// Limit Function
limit(maxl, minl, x) = max(minl, min(maxl, x));


/************************************************************************
************************************************************************
- FILTERS 1 -
************************************************************************
************************************************************************/

// SVF TPT
SVFTPT(Q, cf, x) = loop ~ si.bus(2) : (! , ! , _ , _ , _ , _ , _)
    with {
        g = tan(cf * ma.PI * ma.T);
        R = 1.0 / (2.0 * Q);
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;
        loop(s1, s2) = u1 , u2 , lp , hp , bp * 2.0 * R , x - bp * 4.0 * R , bp
            with {
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
            };
    };

LPSVF(Q, cf, x) = SVFTPT(Q, cf, x) : (_ , ! , ! , ! , !);
HPSVF(Q, cf, x) = SVFTPT(Q, cf, x) : (! , _ , ! , ! , !);
// Normalized Bandpass SVF TPT
BPSVF(Q, cf, x) = SVFTPT(Q, cf, x) : (! , ! , _ , ! , !);
NotchSVF(Q, cf, x) = x - BPSVF(Q, cf, x);
APSVF(Q, cf, x) = SVFTPT(Q, cf, x) : (! , ! , ! , _ , !);
PeakingSVF(Q, cf, x) = LPSVF(Q, cf, x) - HPSVF(Q, cf, x);
BP2SVF(Q, cf, x) = SVFTPT(Q, cf, x) : (! , ! , ! , ! , _);
BPBWSVF(BW, CF, x) = BPSVF(limit(20000, EPS, (CF / BW)), CF, x);

// Normalized Bandpass SVF TPT
BPTPTN(bwshift, fshift, gshift, qf, cf, gf, x) = loop ~ si.bus(2) : 
                                                    (! , ! , _ * (gf * gshift))
    with {
        g = tan((cf * fshift) * ma.PI * ma.T);
        R = 1.0 / (2.0 * (qf * bwshift));
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;
        loop(s1, s2) = u1 , u2 , bp * 2.0 * R
            with {
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
            };
    };

// Optimized Classic Bandpass SVF TPT
BPTPTG(bwshift, fshift, gshift, qf, cf, gf, x) = loop ~ si.bus(2) : 
                                                    (! , ! , _ * (gf * gshift))
with {
    g = tan((cf * fshift) * ma.PI * (1.0/ma.SR));
    Q = (cf * fshift) / max(ma.EPSILON, qf * bwshift);
    R = 1.0 / (Q + Q);
    G = 1.0 / (1.0 + 2.0 * R * g + g * g);
    loop(s1, s2) = u1 , u2 , bp
        with {
            bp = (g * (x - s2) + s1) * G;
            bp2 = bp + bp;
            v2 = bp2 * g;
            u1 = bp2 - s1;
            u2 = v2 + s2;
        };
};
//process = no.noise <:   (BPTPTG(1, 1, 1, 
//            1000 ^ si.smoo(hslider("Q", 0, -1, 1, .001)), 
//            si.smoo(hslider("F", 20, 20, 20000, 1)), 1)),
//                        (BPTPTN(1, 1, 1, 
//            si.smoo(hslider("Q2", 1, 1, 10000, .001)), 
//            si.smoo(hslider("F", 20, 20, 20000, 1)), 1));

BPBankLerp(Bands, Lists, BWshift, Fshift, Gshift, Phasor, x) = x <: 
    (   bwLists(Bands, Lists, Phasor), 
        lerpFreqLists(Bands, Lists, Phasor), 
        lerpAmpsLists(Bands, Lists, Phasor), 
        par(i, Bands, _)
    ) : 
    ro.interleave(Bands, 4) : par(i, Bands, /*BPTPTN*/
        BPTPTG(BWshift, Fshift, Gshift)) :> _ / Bands
with {
    lerpFreqLists(N, L, ph) = par(i, N, par(k, L, ba.take(1 + i, Flist(k))) <: 
        lerpMulti(L, ph));
    lerpAmpsLists(N, L, ph) = par(i, N, par(k, L, ba.take(1 + i, Alist(k))) <: 
        lerpMulti(L, ph));
    bwLists(N, L, ph) = par(i, N, 1);
};
//process = no.noise : BPBankLerp(32, 4, 
//                        vslider("BW", 1, 0, 1, .001), 
//                        vslider("F", 1, 0, 1, .001), 
//                        vslider("G", 1, 0, 1, .001), 
//                        vslider("LERP", 0, 0, 1, .001)
//                    );


/************************************************************************
************************************************************************
- FILTERS 2 -
************************************************************************
************************************************************************/

//--------------------------------------------- ONEZERO FILTER (FIR of I° Order)
// (g) = give amplitude 0-1(open-close) to the delayed signal 
// (g) = +1 lowpass, (g) = -1 highpass
ozf(g, x) = (x' * g), x :> +;

//--------------------------------------- ONEPOLE FILTER (IIR of 1 sample delay)
// only the pole section
pole(g) = + ~ * (g);

//--------------------------------------------------------------- ALLPASS FILTER
// (t, g) = give: delay in samples, feedback gain 0-1
apf(del, g, x) = x : (+ : _ <: @(del  - 1), *(g))~ *(-g) : mem, _ : + : _;

// APF Time Variant
sdelay(maxDelay, interpolationLen, delayLen, x) = 
    loop ~ si.bus(4) : (! , ! , ! , ! , _)
    with {
        loop(lineState, incrState, lowerDelayState, upperDelayState) = 
            line , incr , lowerDelay , upperDelay , output
            with {
                lowerReach = lineState == 0;
                upperReach = lineState == 1;
                lowerDelayChange = delayLen != lowerDelayState;
                upperDelayChange = delayLen != upperDelayState;
                incr = ba.if(   upperReach & upperDelayChange,
                                -1.0 / interpolationLen,
                                ba.if(  lowerReach & lowerDelayChange),
                                        1.0 / interpolationLen,
                                        incrState);
                line = max(.0, min(1.0, lineState + incr));
                lowerDelay = ba.if(upperReach, delayLen, lowerDelayState);
                upperDelay = ba.if(lowerReach, delayLen, upperDelayState);
                lowerDelayline = de.delay(maxDelay, lowerDelay, x) * 
                                    (1.0 - line);
                upperDelayline = de.delay(maxDelay, upperDelay, x) * line;
                output = lowerDelayline + upperDelayline;
            };
    };

allpassWerner(maxDel, intTime, del, g, x) = (loop : sdelay(maxDel, intTime, del - 1)) ~ 
                                                _ : mem * D_g + x * g
    with {
        D_g = sqrt(1 - g * g);
        loop(fb) = x * D_g - g * fb;
    };

AllpassWernerCascade(M, maxDel, intTime, d, g, x) = x : 
    seq(i, M, allpassWerner(maxDel, intTime, d * (sqrt((i + 1) / M) - sqrt(i / M)), g));


//------------------------------------------------------------------ ONEPOLE TPT
// Zavalishin Onepole TPT Filter
// TPT version of the One-Pole Filter by Vadim Zavalishin
// reference : (by Will Pirkle)
// http://www.willpirkle.com/Downloads/AN-4VirtualAnalogFilters.2.0.pdf
onePoleTPT(cf, x) = loop ~ _ : ! , si.bus(3)
    with {
        g = tan(cf * ma.PI * ma.T);
        G = g / (1.0 + g);
        loop(s) = u , lp , hp , ap
            with {
            v = (x - s) * G; u = v + lp; lp = v + s; hp = x - lp; ap = lp - hp;
            };
    };

// Lowpass  TPT
LPTPT(cf, x) = onePoleTPT(cf, x) : (_ , ! , !);

// Highpass TPT
HPTPT(cf, x) = onePoleTPT(cf, x) : (! , _ , !);

// Allpass TPT
APTPT(cf, x) = onePoleTPT(cf, x) : (!, !, _);

//-------------------------------------------------------------- BUTTERWORTH ---
butterworthQ(order, stage) = qFactor(order % 2)
    with {
        qFactor(0) = 1.0 / (2.0 * cos(((2.0 * stage + 1) *
        (ma.PI / (order * 2.0)))));
        qFactor(1) = 1.0 / (2.0 * cos(((stage + 1) * (ma.PI / order))));
    };

LPButterworthN(1, cf, x) = LPTPT(cf, x);
LPButterworthN(N, cf, x) = cascade(N % 2)
    with {
        cascade(0) = x : seq(i, N / 2, LPSVF(butterworthQ(N, i), cf));
        cascade(1) = x : LPTPT(cf) : seq(i, (N - 1) / 2,
        LPSVF(butterworthQ(N, i), cf));
    };

HPButterworthN(1, cf, x) = HPTPT(cf, x);
HPButterworthN(N, cf, x) = cascade(N % 2)
    with {
        cascade(0) = x : seq(i, N / 2, HPSVF(butterworthQ(N, i), cf));
        cascade(1) = x : HPTPT(cf) : seq(i, (N - 1) /
        2, HPSVF(butterworthQ(N, i), cf));
    };
    
//------------------------------------------------------------------- DC BLOCKER
// https://ccrma.stanford.edu/~jos/fp/DC_Blocker.html
dcblocker(zero, pole, x) = x : dcblockerout
            with{
                onezero =  _ <: _, mem : _,* (zero) : -;
                onepole = + ~ * (pole);
                dcblockerout = _ : onezero : onepole;
            };


/************************************************************************
************************************************************************
- OSCILLATORS -
************************************************************************
************************************************************************/

// Duffing
duffing_OSC_global(id, in) = out
with{
    // Filterbank Controls
    bypass = si.smoo(vslider("h: Duffing /Filtered", 1, 0, 1, .001));
    oppositebp = 1 - bypass;
    Fqshift = 16 ^ si.smoo(vslider("h: Duffing /Pitch Shift", 0, -1, 1, .001));
    Qbp = 100 ^ si.smoo(vslider("h: Duffing /Q", 0, -1, 1, .001));
    Lerp = si.smoo(vslider("h: Duffing /Interpolation", 1, 0, 1, .001));
    // Equations Controls
    beta = si.smoo(vslider("h: Duffing /Mod",1, 0, 1, .001));
    alpha = 1;
    omega = 1000 ^ si.smoo(vslider("h: Duffing /Rate", 1, -1, 1, .001));
    gain =  10000 ^ si.smoo(vslider("h: Duffing /Gain", 0, -1, 1, .001));
    interact = si.smoo(vslider("h: Duffing /Interactions", 1, 0, 1, .001));
    delta = (1 - interact) + (in * interact); 
    T = omega/ma.SR : + ~ _;
    duffing(y, x) = - delta * y - alpha * (x ^ 3) - beta * cos(T) <: _, _;
    filters(x) = dcblocker(1, .995, x) * gain <: (_ * bypass : 
        BPBankLerp(32, 4, Qbp, Fqshift, 1, Lerp)),_ * oppositebp :> atanlimit;
    out = (duffing : (_, filters)) ~ si.bus(2) : !, _;
};

// Duffing
duffing_OSC(id, in) = out
with{
    // Filterbank Controls
    bypass = si.smoo(vslider("h: Duffing %id/Filtered", 1, 0, 1, .001));
    oppositebp = 1 - bypass;
    Fqshift = 16 ^ si.smoo(vslider("h: Duffing %id/Pitch Shift", 0, -1, 1, .001));
    Qbp = 100 ^ si.smoo(vslider("h: Duffing %id/Q", 0, -1, 1, .001));
    Lerp = si.smoo(vslider("h: Duffing %id/Interpolation", 1, 0, 1, .001));
    // Equations Controls
    beta = si.smoo(vslider("h: Duffing %id/Mod",1, 0, 1, .001));
    alpha = 1;
    omega = 1000 ^ si.smoo(vslider("h: Duffing %id/Rate", 1, -1, 1, .001));
    gain =  10000 ^ si.smoo(vslider("h: Duffing %id/Gain", 0, -1, 1, .001));
    interact = si.smoo(vslider("h: Duffing %id/Interactions", 1, 0, 1, .001));
    delta = (1 - interact) + (in * interact); 
    T = omega/ma.SR : + ~ _;
    duffing(y, x) = - delta * y - alpha * (x ^ 3) - beta * cos(T) <: _, _;
    filters(x) = dcblocker(1, .995, x) * gain <: (_ * bypass : 
        BPBankLerp(32, 4, Qbp, Fqshift, 1, Lerp)),_ * oppositebp :> atanlimit;
    out = (duffing : (_, filters)) ~ si.bus(2) : !, _;
};

duffing_autOSC(id, in, rate, frequency, interpol, bandwidth, mod, interactions, gains) = 
    vgroup("Duffing %id", (duffing : (_, filters)) ~ si.bus(2) : !, _)
with{
    // Filterbank Controls
    Fqshift = hgroup("frequency", frequency : biToUni : map(.1, 1) : infoScale(1, -2, 2)); 
    Qbp = hgroup("Bandwidth ", 100 ^ bandwidth : info(1, -100, 100));
    Lerp = hgroup("interpolation", interpol : biToUni : infoScale(1, -1, 1)); 
    // Equations Controls
    Beta = hgroup("modulation", mod: biToUni : infoScale(1, -1, 1));
    Alpha = 1;
    Omega = hgroup("rate", 500 ^ rate : infoScale(1, -500, 500)); 
    Gain =  hgroup("gains", 1000 ^ gains : info(1, -1000, 1000)); 
    Interact = hgroup("interactions", interactions : biToUni : infoScale(1, -1, 1));
    Delta = (1 - Interact) + (in * Interact); 
    T = Omega/ma.SR : + ~ _;
    duffing(y, x) = - Delta * y - Alpha * (x ^ 3) - Beta * cos(T) <: _, _;
    filters(x) = dcblocker(1, .995, x) * Gain : BPBankLerp(32, 4, Qbp, Fqshift, 1, Lerp) : 
                    atanlimit;
};


/************************************************************************
************************************************************************
- SIGNALS GENERATION -
************************************************************************
************************************************************************/

// pseudo-random noise with linear congruential generator (LCG)
noise(i_list) = LCG ~ _ : (_ / m)
with{
    // initSeed = an initial seed value
    a = 18446744073709551557; // a large prime number, 
    c = 12345; // a small prime number, such as 12345
    m = 2 ^ 31; // 2.1 billion
    // linear_congruential_generator
    LCG(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
    initSeed = ba.take((i_list + 1), 
        (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 
        53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 
        109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
        173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 
        233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 
        293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 
        367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 
        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 
        499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 
        577, 587, 593, 599, 601)
    );
};
// multi-noise 100 elements max.
multinoise(N) = par(i, N, noise(i));

// SAH with Feedback in FrequencyModulation
modSAH(minSec, maxSec, y) = out ~ _
with{
    ph(f, modf) = (f + modf : + ~ _ % ma.SR) / ma.SR;
    trigger(x) = x < x';
    minT = 1 / minSec;
    maxT = 1 / maxSec;
    iniTrig = 1 - 1';
    out(x) = (minT, abs(x * (maxT - minT))) : ph : trigger : (_ + iniTrig, x, y) : 
                selector;
};
// Multi-FMOD-SAH
multimodSAH(N, minSec, maxSec) = par(i, N, modSAH(minSec, maxSec));
//process = multinoise(8) : multimodSAH(8, .1, .2);

// Mod Metro
randomTrigger(i, minRangeSec, maxRangeSec) = out
with{
    equalTrigger(x) = (1 - (x == x')); 
    out = noise(i) : modSAH(maxRangeSec, minRangeSec) : equalTrigger;
};
// multi random-Triggers
multirndmTriggers(N, minRangeSec, maxRangeSec) = 
    par(i, N, randomTrigger(i, minRangeSec, maxRangeSec));
//process = multirndmTriggers(8, .1, 1);

// SAH triggered by Dirac Impulse (1 - 1')
SAH(trigger, y) = ((trigger, _, y) : selector) ~ _;

// random Sample and Hold incoming signal in Input
rndmSAH(i, interpolSec, minRangeSec, maxRangeSec, x) = 
    (randomTrigger(i, minRangeSec, maxRangeSec), x) : SAH : secLine(interpolSec)
with{
    // Interpolation : Line in Seconds
    secLine(sec, x) = x : ba.line(sec * ma.SR);
};
multirndmSAH(N, interpolSec, minRangeSec, maxRangeSec) =
    par(i, N, rndmSAH(i, interpolSec, minRangeSec, maxRangeSec));
//process = os.osc(123) <: multirndmSAH(8, 10, 5, 10);

nonlinearSAH(i, interpolSec, minRangeSec, maxRangeSec) = 
    rndmSAH(i, interpolSec, minRangeSec, maxRangeSec) : sine(0)
with{
    sine(offset, ph) = sin(ph * TWOPI + offset * TWOPI);
};
multinonlinearSAH(N, interpolSec, minRangeSec, maxRangeSec) =
    par(i, N, nonlinearSAH(i, interpolSec, minRangeSec, maxRangeSec));
//process = os.osc(123) <: multinonlinearSAH(8, 10, 5, 10);

// Control Signal with Mod SAH
CntrlSignals(i, Nc, interpolSec, minRangeSec, maxRangeSec) = 
    _ <: (_, par(k, Nc, controlgen(k)))
with{
    // control Signal Generation + Manual Control
    controlgen(k) = 
        ((nonlinearSAH(k + (i * 10), interpolSec, minRangeSec, maxRangeSec) :
            hgroup("System Bias", _ * checkbox("Autonomous Control"))
        ) + 
            hgroup("System Bias", biasFunction(k))) : ma.tanh;
    // Bias control
    biasFunction(initBias) = biasSlider(initBias) : si.smoo
    with{
        biasSlider(0) = hslider("rate [style: knob]", 0, -10, 10, .001);
        biasSlider(1) = hslider("frequency [style: knob]", 0, -10, 10, .001);
        biasSlider(2) = hslider("interpolation [style: knob]", 0, -10, 10, .001);
        biasSlider(3) = hslider("bandwidth [style: knob]", 0, -10, 10, .001);
        biasSlider(4) = hslider("modulation [style: knob]", 0, -10, 10, .001);
        biasSlider(5) = hslider("interactions [style: knob]", 0, -10, 10, .001);
        biasSlider(6) = hslider("gains [style: knob]", 0, -10, 10, .001);
    };
};


/************************************************************************
************************************************************************
- AUDIO INFORMATION PROCESSING -
************************************************************************
************************************************************************/

//----------------------------------------------------------------- MAX PEAK ---
// references: 1, 2
// Peak Max with IIR filter and max comparison
peakmax(x) = loop ~_
with{
    loop(y) = abs(x) , y : max;
};
//process = _ : peakmax;

//--------------------------------------------------- MAX PEAK NORMALIZATION ---
// references: 5
// Peak Max Normalization
fixedNorm(x) = 1 / (x : loop ~ _) * x
with{
    loop(y,z) = ( (y, abs(z) ) : max);
};
//process = _ * .2 : fixedNorm;

//--------------------------------------------------- PEAK ENVELOPE FOLLOWER ---
peakenvelope(period, x) = loop ~ _
    with {
        loop(y) = max(abs(x), y * coeff);
        twoPIforT = (2.0 * ma.PI) * (1.0 / ma.SR);
        coeff = exp(-twoPIforT / max(EPS, period));
    };

// Peak envelope. with attack and decay
peakEnvAttRel(att, rel, x) = peakenvelope(rel - att, x) : 
    LPTPT(1.0 / max(EPS, att));

//----------------------------------------- MOVING AVERAGE ENVELOPE FOLLOWER ---
movingAverage(seconds, x) = x - x@(seconds * ma.SR) : 
    fi.pole(1.0) / (seconds * ma.SR);
//process = _ * 10 : movingAverage(1);

//------------------------------------------------------- MOVING AVERAGE RMS ---
movingAverageRMS(seconds, x) = sqrt(max(0, movingAverage(seconds, x ^ 2)));
//process = movingAverageRMS(1);

//-------------------------------------------------------------- PEAK HOLDER ---
// holdTime in Seconds
peakHolder(holdTime, x) = loop ~ si.bus(2) : ! , _
with {
    loop(timerState, outState) = timer , output
    with {
        isNewPeak = abs(x) >= outState;
        isTimeOut = timerState >= (holdTime * ma.SR - 1);
        bypass = isNewPeak | isTimeOut;
        timer = ba.if(bypass, 0, timerState + 1);
        output = ba.if(bypass, abs(x), outState);
    };
};

//----------------------------------------------- ATTACK DECAY - RMS AVERAGE ---
// references: 3
RMS(att, rel, x) = loop ~ _ : sqrt
    with {
        loop(y) = (1.0 - coeff) * x * x + coeff * y
            with {
                attCoeff = exp(-2.0 * ma.PI * ma.T / att);
                relCoeff = exp(-2.0 * ma.PI * ma.T / rel);
                coeff = ba.if(abs(x) > y, attCoeff, relCoeff);
            };
    };


//--------------------------------------------------------- DYNAMIC LIMITERS ---
// lookahead limiter with: peakHolder, lowpass & peakenvelope
// All the credits of the original version goes to Dario Sanfilippo 
LookaheadLimiter(threshold, holdSec, decaySec, x) = 
    (x : peakHolder(holdSec) : LPTPT(1/holdSec) : peakenvelope(decaySec)) : 
        (min(1, threshold) / max(1, _)) * 
            (x @ (holdSec * ma.SR)); 

//------------------------------------------------------ DYNAMIC COMPRESSION ---
dynamiComp(i, k, att, rel, exponent, x) = 
vgroup("dynaComp %i", (x * scaling) : hgroup("out %i", infoScale(k, -100, 100)))
    with {
        complement(x) = 1.0 - x;
        clipUni(x) = max(0.0, min(1.0, x));
        scaling = ma.tanh(x) : peakEnvAttRel(att, rel) : 
            clipUni : complement : 
                pow(exponent : hgroup("exp %i", infoScale(k, -100, 100)));
    };  

//------------------------------------------------------------ PITCH TRACKER ---
// averaging function with 2pi time constant; t is the averaging time in seconds
avg(t, x) = y
    letrec {
        'y = x + alpha * (y - x);
    }
        with {
            alpha = exp((-2.0 * ma.PI * ma.T) / t);
        };

// zero-crossing indicator function
zeroCrossing(x) = (x * x') < 0;

// zero-crossing rate
zeroCrossingRate(t, x) = zeroCrossing(x) : avg(t);

// pitch tracker as zero-crossing rate of self-regulating lowpassed inputs
// we highpass the input to avoid infrasonic
// components to affect the measurements
// we then clip the lowpass cutoff to improve stability
pitchTracker(t, x) = loop ~ _
    with {
        loop(y) = fi.lowpass(4, max(80, y), xHighpassed) :
                  (zeroCrossingRate(t) * ma.SR * .5)
            with {
                xHighpassed = fi.highpass(1, 20, x);
            };
    };

// Resonant Frequency Suppressor
resonKill(bypass, T, Q, x) = out
with{
    FC = pitchTracker(T, x);
    filter = x - BPSVF(Q, FC, x);
    out = filter * (1 - bypass) + x * bypass;
};

//---------------------------------------------------------------- LOCAL MAX ---
localMax(seconds, x) = loop ~ si.bus(4) : _ , ! , ! , !
with {
    loop(yState, timerState, peakState, timeInSamplesState) = 
        y , timer , peak , timeInSamples
    with {
        timeInSamples = ba.if(reset + 1 - 1', limit(1000, 0, seconds) * 
            ma.SR, timeInSamplesState);
        reset = timerState >= (timeInSamplesState - 1);
        timer = ba.if(reset, 1, timerState + 1);
        peak = max(abs(x), peakState * (1.0 - reset));
        y = ba.if(reset, peak', yState);
    };
};
// process = localMax(4);


/************************************************************************
************************************************************************
- NETWORKS -
************************************************************************
************************************************************************/

//----------------------------------------------------- VECTORIAL OPERATIONS ---
// perform operations on an arbitrary number of vectors
vecOp(vectorsList, op) =
    vectorsList : seq(i, vecDim - 1, vecOp2D , vecBus(vecDim - 2 - i))
    with {
        vecBus(0) = par(i, vecLen, 0 : !);
        vecBus(dim) = par(i, dim, si.bus(vecLen));
        vecOp2D = ro.interleave(vecLen, 2) : par(i, vecLen, op);
        vecDim = outputs(vectorsList) / vecLen;
        vecLen = outputs(ba.take(1, vectorsList));
    };

//----------------------------------------------------------------- MATRIXES ---
// vector FDN Matrix
vecMx(N, list) = si.bus(N) <: par(i, N, (vecOp((si.bus(N), list), *) :> +));

vecMatrix(N) = si.bus(N) <: par(i, N, (vecOp((si.bus(N), list(i+1)), *) :> +))
with{
    list(1) = 1, 0, 0, 0;
    list(2) = 0, 1, 0, 0;
    list(3) = 0, 0, 1, 0;
    list(4) = 0, 0, 0, 1;
    list(5) = 1, 0, 0, 0;
    list(6) = 0, 1, 0, 0;
    list(7) = 0, 0, 1, 0;
    list(8) = 0, 0, 0, 1;
};

// fully connected FDN Matrix
fullyconnectedMx(N) =  vecMx(N, par(i, N, 1));
fullyconnectedMxNorm(N) =  vecMx(N, par(i, N, 1/N));

// hadamard FDN Matrix
butterfly(2) = si.bus(2) <: +, -;
butterfly(N) = si.bus(N) <: 
    ro.interleave(N/2,2), ro.interleave(N/2,2) : par(i, N/2, +), par(i, N/2, -);
hadamard(2) = butterfly(2);
hadamard(N) = butterfly(N) : (hadamard(N/2), hadamard(N/2));

// Normalized hadamard FDN Matrix
hadamardcoeff(N) = par(i, N, 1.0 / sqrt(N)); 
hadamardNormalized(N) = vecOp((hadamard(N) , hadamardcoeff(N)), *);

//----------------------------------------------------------------- NETWORKS ---
FDNfullyconnected(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) : 
    vecOp((si.bus(N), par(i, N, D * (ma.SR - 1))), @)) ~
        (fullyconnectedMxNorm(N));

FDNhadamard(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) : 
    vecOp((si.bus(N), par(i, N, D * (ma.SR - 1))), @)) ~
        (hadamardNormalized(N));

FDNsingleLoop(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) : 
    vecOp((si.bus(N), par(i, N, D * (ma.SR - 1))), @)) ~ ro.crossNM(N-1, 1);

FDNmatrix(N, D, G) = (vecOp((si.bus(N) , si.bus(N)), +) : 
    vecOp((si.bus(N), par(i, N, D * (ma.SR - 1))), @)) ~ (vectorMatrix(N))
with{
    vectorMatrix(N) = si.bus(N) <: 
        par(i, N, (vecOp((si.bus(N), list(i+1)), *) :> +))
    with{
        list(1) = 1, 0, 0, 0;
        list(2) = 0, 1, 0, 0;
        list(3) = 0, 0, 1, 0;
        list(4) = 0, 0, 0, 1;
        list(5) = 1, 0, 0, 0;
        list(6) = 0, 1, 0, 0;
        list(7) = 0, 0, 1, 0;
        list(8) = 0, 0, 0, 1;
    };
};

// Select Matrix
Matrixes(N, i) = matrix(i)
with{
    matrix(0) = fullyconnectedMxNorm(N);
    matrix(1) = hadamardNormalized(N);
    matrix(2) = ro.crossNM(N - 1, 1);

};


/************************************************************************
************************************************************************
- NONLINEARITIES - 
************************************************************************
************************************************************************/

// LP Based controlSignalProcessing
LPcontrolSignalProcessing(i, k, exponent, responseTime, x) = 
        xAverageSign * pow(abs(xAverageNormalisedSaturated) * .9, exponent) : 
                os.osc : hgroup("Control Osc %i", infoScale(k, -1, 1)
    )
with {
    xAverage = x : seq(i, 4, LPTPT(1.0 / responseTime));
    xAverageRMS = xAverage * xAverage : 
        seq(i, 4, LPTPT(1.0 / (10.0 * responseTime))) : sqrt;
    xAverageNormalised = xAverage / max(EPS, xAverageRMS);
    xAverageNormalisedSaturated = ma.tanh(xAverageNormalised);
    xAverageSign = ma.signum(xAverage);
};
multinoise(N) = par(i, N, noise(i));

// Neuron Based Control Signals
Neurons(neuronsN, synapsesN, diffrangeSeck, x) = network
with{
    network = x : synapses(1, 1, 10, 5, .1 + diffrangeSeck) : neuronDistrib : 
        par(i, neuronsN, neuronFunction(200 + i * synapsesN, i + 100));

    synapses(range, lerpSec, slowrangeSec, fastrangeSec, diffrangeSec, x) = 
        x <: par(i, synapsesN, 
            cntrlSigSAH(range, lerpSec, slowrangeSec, fastrangeSec + 
            (i * diffrangeSec), ph(i + 300))
            )
    with{
        ph(i) = noise(ba.take(i, Primes)) : triggerSAH;
    };

    neuronDistrib = si.bus(synapsesN) <: si.bus(synapsesN * neuronsN);
    activationFunction(x) = x : ma.tanh;
    neuronWeights(neuronID) = vecOp((si.bus(synapsesN), 
                                weightsFunction(neuronID)), *) :> _;
    neuronFunction(neuronID, biasID) = neuronWeights(neuronID), biasFunction(biasID) :> 
                                            activationFunction;
    biasFunction(biasID) = // noise(ba.take(biasID, Primes)) : triggerSAH + 
        vgroup("Bias Controls", biasSlider(biasID)) : si.smoo
    with{
        biasSlider(100) = hslider("rate", 0, -10, 10, .001);
        biasSlider(101) = hslider("frequency", 0, -10, 10, .001);
        biasSlider(102) = hslider("interpolation", 0, -10, 10, .001);
        biasSlider(103) = hslider("bandwidth", 0, -10, 10, .001);
        biasSlider(104) = hslider("modulation", 0, -10, 10, .001);
        biasSlider(105) = hslider("interactions", 0, -10, 10, .001);
        biasSlider(106) = hslider("gains", 0, -10, 10, .001);
    };
    weightsFunction(neuronID) = par(i, synapsesN, 
                                    noise(ba.take(i + 1 + (neuronID), Primes))) : 
                                        par(i, synapsesN, triggerSAH : si.smoo);

    triggerSAH(y) = out ~ _
    with{
        ph = button("trigger");
        trigger = ph > ph';
        iniTrig = 1@512 - 1@513;
        out(x) = trigger : (_ + iniTrig, x, y) : selector;
    };
};
//process = os.osc(10) : Neurons(8, 8, 0);

//------------------------------------------------------- SAH DIFF INVERSION ---
/*  Sample-and-hold signals whose slope changes sign over a certain 
    period/ */
SAHDiffInvertion(x) = loop ~ _
    with {
        loop(y) = ba.if(nonZeroDiff * nonZeroDiff' < .0, x, y);
        nonZeroDiff = ba.sAndH(abs(diff(x)) > EPS, diff(x));
        diff(x) = x - x';
    };

//----------------------------------------------------------- RELAY HYSTERON ---
hysteron(alpha, beta, x) = loop ~ _
    with {
        loop(y) = ba.if(x < alpha, .0, ba.if(x > beta, 1.0, y));
    };  

//----------------------------------------------- OUTPUT STAGE STABILIZATION ---
Stabilizer(N) = 
    vecOp(( par(i, N, dcblocker(1, .995) : LookaheadLimiter(1.0, .1, 10)), 
            (si.smoo(hslider("Gain [style: knob]", 1, 0, 1, .001)) <: si.bus(N))), 
        *);