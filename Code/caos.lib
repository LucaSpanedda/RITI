// THIS library
caos = library("caos.lib");
// import Standard Faust library
// https://github.com/grame-cncm/faustlibraries/
import("stdfaust.lib");

/*
Caos Library
*/


//----------------------------------------------------------- CLASSIC MODELS ---

/*
Logistic Map
*/
logisticmap(x0,r) = circuit ~ _
    with {
        circuit(y) = (x0-x0') + y * r * (1 - y);
    };  
// process = (.8, 3.99991) : logisticmap -.5 : \(x).(x,x);

/*
Sine Map 
*/
sinemap(x0,s) = circuit ~ _
    with {
        circuit(x) = (x0-x0') + s * sin(ma.PI * x);
    };  
// process = (.5,.9992) : sinemap -.5 : \(x).(x,x);

/*
Lorenz Model
*/
lorenz(x0,y0,z0,sigma,rho,beta,dt,q) = circuit ~ si.bus(3)
    with {
        circuit(x,y,z) = 
            ( (x+ (sigma*(y-x))*dt) * q )+ (x0-x0'), 
            ( (y+ (rho*x -(x*z) -y) * dt)*q )+ (y0-y0'), 
            ( (z+ ((x*y)-(beta*z)) * dt)*q )+ (z0-z0');
    };
/*
process =   (1.2,1.3,1.6, 10.0,28,2.666667,.005, 1.0) : 
                lorenz : \(x,y,z).(x+y+z)/100 : \(x).(x,x);
                */

/*
Van Der Pol Oscillator
*/
vanderpol(x0,y0,u,dt,epsilon) = circuit ~ si.bus(2)
    with {
        circuit(x,y) = 
            ( x + (u * (x - x ^ 3 / 3 - y) * dt) ) + (x0-x0'), 
            ( y + (x / max(u,epsilon) ) * dt ) + (y0-y0');
    };
/*
process = (1,1, 1.0,0.01,2.2204460492503131e-016) : 
            vanderpol : \(x,y).(x/4,y/4);
            */

/*
Chua Oscillator
*/
chua(x0,y0,z0,k,a,b,alpha,beta,gamma,dt) = circuit ~ si.bus(3)
    with {
        f(x) = b * x + .5 * (a-b) * (abs(x + 1) - abs(x - 1));
        circuit(x,y,z) = 
            (x0-x0' + x + k *( alpha * (y - x - f(x))) * dt),
            (y0-y0' + y + k *( (x - y + z)) * dt),
            (z0-z0' + z + k *(-beta * y - gamma * z) * dt);
    };
/*
process =   (1.16346, -0.0972335, -0.905656, 1, -1.14286, 
            -0.714286, 15.6, 28.58, 0, 0.01) : 
                chua : \(x,y,z).(x+y+z)/3 : \(x).(x,x);
                */
                
//---------------------------------------------------------- MODIFIED MODELS ---
