// import faust standard library
import("stdfaust.lib");


// INSTRUMENT SPECTRES --------------------------------------
// FFT analysis

Cello_C2pp_frequencies = (
65.0, 131.0, 197.0, 262.0, 327.0, 393.0, 458.0, 524.0, 589.0, 655.0, 720.0, 786.0, 851.0, 917.0, 982.0, 1047.0, 1113.0, 1178.0, 1244.0, 1310.0, 1375.0, 1441.0, 1506.0, 1572.0, 1637.0, 1702.0, 1768.0, 1834.0, 1899.0, 1965.0, 2030.0, 2096.0, 2162.0, 2227.0, 2291.0, 2357.0, 2488.0, 2554.0, 2620.0 
) ;
Cello_C2pp_amplitudes = (
0.07059859910111925, 1.0, 0.4853345805441521, 0.2982536102509356, 0.24961558842297396, 0.2007449280132305, 0.15714520106916, 0.15710983038715223, 0.20902308407124426, 0.10262931478151655, 0.07819992990757922, 0.02810958689434847, 0.03754288091044153, 0.08372041813265904, 0.009279653981363467, 0.021274343858254836, 0.027020544307420586, 0.017079810945389268, 0.01010378084323204, 0.011931773365803948, 0.009292107513180662, 0.008880139785774689, 0.009402273488807011, 0.020913589624742844, 0.004590075850397041, 0.00489180207034579, 0.009417326894916154, 0.005117165084975309, 0.0050359586907515515, 0.003563490243407184, 0.0022304754765361617, 0.0051482150163568085, 0.0045940696376874784, 0.002610333246801379, 0.0038621183371596556, 0.003460997636536507, 0.005231061067253463, 0.005789903311212653, 0.0064688892996883456
) ;
Cello_C2pp_bandwidths = (
1.0
) ; 
Cello_C2mf_frequencies = (
66.0, 131.0, 197.0, 263.0, 329.0, 394.0, 460.0, 526.0, 591.0, 657.0, 723.0, 789.0, 855.0, 920.0, 986.0, 1052.0, 1117.0, 1183.0, 1249.0, 1315.0, 1380.0, 1446.0, 1512.0, 1578.0, 1643.0, 1709.0, 1775.0, 1906.0, 1972.0, 2038.0, 2103.0, 2169.0, 2235.0, 2301.0, 2366.0, 2432.0, 2498.0, 2562.0, 2629.0, 2695.0, 2761.0, 3549.0, 3616.0
) ;
Cello_C2mf_amplitudes = (
0.08931336008855205, 0.8007753762981412, 1.0, 0.32822631066196056, 0.3246333163216051, 0.7242172397556179, 0.1882955733672557, 0.31799277100623335, 0.14514869914771847, 0.14254177795442166, 0.08457746910464273, 0.03518835963975562, 0.08126652025129387, 0.027204688212004054, 0.031652271280996694, 0.031768884923916114, 0.043532694299815336, 0.014381855647686617, 0.006796755874077786, 0.03467337388944881, 0.006946747969748449, 0.012927416834251988, 0.026017724055834496, 0.020872852625470034, 0.010519895557046268, 0.02037632564377538, 0.015174522805115756, 0.007273739867819333, 0.007524489401117943, 0.005602574195845349, 0.010073036872446362, 0.01674160248138289, 0.010108135434695083, 0.01919797165090208, 0.006002730196481146, 0.004917976137590072, 0.015869335584826758, 0.005563151090939118, 0.010233973820436152, 0.008208212157990355, 0.004822472851693666, 0.0034857672835203373, 0.003933734553824607
) ;
Cello_C2mf_bandwidths = (
1.0
) ; 
Cello_C2ff_frequencies = (
66.0, 133.0, 200.0, 266.0, 333.0, 398.0, 468.0, 534.0, 601.0, 668.0, 734.0, 801.0, 868.0, 927.0, 1001.0, 1069.0, 1135.0, 1193.0, 1269.0, 1336.0, 1402.0, 1469.0, 1536.0, 1603.0, 1670.0, 1803.0, 2003.0, 2071.0, 2137.0, 2204.0, 2271.0, 2338.0, 2405.0, 2538.0, 2605.0, 2672.0
) ;
Cello_C2ff_amplitudes = (
0.08931336008855205, 0.5868286219193958, 1.0, 0.13340256162340056, 0.20067866281567398, 0.08685570497348173, 0.1910122237654852, 0.08916301729045623, 0.12167227032723882, 0.10804709841963207, 0.03578436918873266, 0.05946918854697944, 0.03722017583994613, 0.02155813155582286, 0.03868904819205307, 0.04418048704877065, 0.03193932045231719, 0.021665620045474746, 0.01959927303746292, 0.016627854635124974, 0.03706420742858663, 0.010771184190690262, 0.033143565705713515, 0.02021888496367669, 0.006599425634265858, 0.008246847057625621, 0.008497922081330603, 0.024894758144551356, 0.00944106323641511, 0.00868695914901522, 0.010468716227846217, 0.009249428002017022, 0.0065726751577281535, 0.017226229774206674, 0.023556455064416896, 0.011367202096697598 
) ;
Cello_C2ff_bandwidths = (
1.0
) ; 
Cello_bow_frequencies = (
65.0, 131.0, 197.0, 262.0, 327.0, 393.0, 458.0, 524.0, 589.0, 655.0, 720.0, 786.0, 851.0, 917.0, 982.0, 1047.0, 1113.0, 1178.0, 1244.0, 1310.0, 1375.0, 1441.0, 1506.0, 1572.0, 1637.0, 1702.0, 1768.0, 1834.0, 1899.0, 1965.0, 2030.0, 2096.0, 2162.0, 2227.0, 2291.0, 2357.0, 2488.0, 2554.0, 2620.0 
) ;
Cello_bow_amplitudes = (
0.07059859910111925, 1.0, 0.4853345805441521, 0.2982536102509356, 0.24961558842297396, 0.2007449280132305, 0.15714520106916, 0.15710983038715223, 0.20902308407124426, 0.10262931478151655, 0.07819992990757922, 0.02810958689434847, 0.03754288091044153, 0.08372041813265904, 0.009279653981363467, 0.021274343858254836, 0.027020544307420586, 0.017079810945389268, 0.01010378084323204, 0.011931773365803948, 0.009292107513180662, 0.008880139785774689, 0.009402273488807011, 0.020913589624742844, 0.004590075850397041, 0.00489180207034579, 0.009417326894916154, 0.005117165084975309, 0.0050359586907515515, 0.003563490243407184, 0.0022304754765361617, 0.0051482150163568085, 0.0045940696376874784, 0.002610333246801379, 0.0038621183371596556, 0.003460997636536507, 0.005231061067253463, 0.005789903311212653, 0.0064688892996883456
) ;
Cello_bow_bandwidths = (
1.0
) ; 

// INSTRUMENT SPECTRES --------------------------------------
// index of the lists

FrequenciesListCH1(index) = ba.take(index, Cello_C2pp_frequencies) ;
AmplitudesListCH1(index) = ba.take(index, Cello_C2pp_amplitudes)  ;
BandwidthsListCH1(index) = ba.take(1,     Cello_C2pp_bandwidths)  ;

FrequenciesListCH2(index) = ba.take(index, Cello_C2mf_frequencies) ;
AmplitudesListCH2(index) = ba.take(index, Cello_C2mf_amplitudes)  ;
BandwidthsListCH2(index) = ba.take(1,     Cello_C2mf_bandwidths)  ;

FrequenciesListCH3(index) = ba.take(index, Cello_C2ff_frequencies) ;
AmplitudesListCH3(index) = ba.take(index, Cello_C2ff_amplitudes)  ;
BandwidthsListCH3(index) = ba.take(1,     Cello_C2ff_bandwidths)  ;

FrequenciesListCH4(index) = ba.take(index, Cello_C2pp_frequencies) ;
AmplitudesListCH4(index) = ba.take(index, Cello_C2pp_amplitudes)  ;
BandwidthsListCH4(index) = ba.take(1,     Cello_C2pp_bandwidths)  ;

// INSTRUMENT SPECTRES --------------------------------------
// interpolations

// linear interpolation
linInterpolate(x0, x1, delta) = x0 + delta * (x1-x0);
siglinInterpol(order, x) = x : seq(r, order, interpolate)
with{
    interpolate(y) = y + .5 * (y' - y);
};

// bilinear interpolation
bilinInterpolate(x0, x1, x0b, x1b, dt1, dt2) = 
    linInterpolate(
        linInterpolate(x0, x1, dt1), 
        linInterpolate(x0b, x1b, dt1),
        dt2)
    with{
        linInterpolate(x0, x1, delta) = x0 + delta * (x1-x0);
    };

// lists interpolations
FrequenciesListinterpolate(index, dt1, dt2) = bilinInterpolate(FrequenciesListCH1(index), FrequenciesListCH2(index), FrequenciesListCH3(index), FrequenciesListCH4(index), dt1, dt2);
AmplitudesListinterpolate(index, dt1, dt2) = bilinInterpolate(AmplitudesListCH1(index), AmplitudesListCH2(index), AmplitudesListCH3(index), AmplitudesListCH4(index), dt1, dt2);
BandwidthsListinterpolate(index, dt1, dt2) = bilinInterpolate(BandwidthsListCH1(index), BandwidthsListCH2(index), BandwidthsListCH3(index), BandwidthsListCH4(index), dt1, dt2);